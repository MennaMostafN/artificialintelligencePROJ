import networkx
import networkx as nx
from be import *
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets

backendg = SearchAlgo()
k = 0
list1 = []
list2 = []
list3 = []
list4 = []
t1 = []
t2 = []
startz = []
goalz = []
listedges = ()
listcombo = ()

class Ui_AIProject(object):
    def setupUi(self, AIProject):
        AIProject.setObjectName("AIProject")
        AIProject.resize(721, 602)
        self.centralwidget = QtWidgets.QWidget(AIProject)
        self.centralwidget.setObjectName("centralwidget")
        self.window1 = QtWidgets.QTabWidget(self.centralwidget)
        self.window1.setGeometry(QtCore.QRect(0, 0, 721, 561))
        self.window1.setMouseTracking(False)
        self.window1.setAutoFillBackground(False)
        self.window1.setStyleSheet("background-color:rgb(220, 220, 220)")
        self.window1.setTabPosition(QtWidgets.QTabWidget.North)
        self.window1.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.window1.setElideMode(QtCore.Qt.ElideLeft)
        self.window1.setDocumentMode(True)
        self.window1.setTabsClosable(False)
        self.window1.setMovable(True)
        self.window1.setTabBarAutoHide(False)
        self.window1.setObjectName("window1")
        self.tab = QtWidgets.QWidget()
        self.tab.setAcceptDrops(False)
        self.tab.setAutoFillBackground(False)
        self.tab.setObjectName("tab")
        self.line_4 = QtWidgets.QFrame(self.tab)
        self.line_4.setGeometry(QtCore.QRect(30, 60, 661, 20))
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.line_7 = QtWidgets.QFrame(self.tab)
        self.line_7.setGeometry(QtCore.QRect(280, 440, 401, 20))
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.title = QtWidgets.QLabel(self.tab)
        self.title.setGeometry(QtCore.QRect(180, 20, 600, 39))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(9)
        self.title.setFont(font)
        self.title.setStyleSheet("font: 75 italic 19pt \"Arial\";\n"
"background-color=\"blue\"")
        self.title.setTextFormat(QtCore.Qt.RichText)
        self.title.setScaledContents(False)
        self.title.setWordWrap(False)
        self.title.setObjectName("title")
        self.aiproject = QtWidgets.QLabel(self.tab)
        self.aiproject.setGeometry(QtCore.QRect(560, 20, 300, 16))
        self.aiproject.setObjectName("aiproject")
        self.subjcode = QtWidgets.QLabel(self.tab)
        self.subjcode.setGeometry(QtCore.QRect(650, 45, 60, 21))
        self.subjcode.setObjectName("subjcode")
        self.logo = QtWidgets.QLabel(self.tab)
        self.logo.setGeometry(QtCore.QRect(30, 20, 41, 41))
        self.logo.setStyleSheet("background-image: url(:/img/logo.png)")
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap(":/img/logo.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.node = QtWidgets.QLineEdit(self.tab)
        self.node.setGeometry(QtCore.QRect(30, 120, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.node.setFont(font)
        self.node.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.node.setFrame(True)
        self.node.setObjectName("node")
        self.nodeheuristic = QtWidgets.QLabel(self.tab)
        self.nodeheuristic.setGeometry(QtCore.QRect(30, 170, 51, 21))
        self.nodeheuristic.setStyleSheet("color:brown;\n"
"")
        self.nodeheuristic.setObjectName("nodeheuristic")
        self.heuvalue = QtWidgets.QSpinBox(self.tab)
        self.heuvalue.setGeometry(QtCore.QRect(210, 170, 41, 21))
        self.heuvalue.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.heuvalue.setObjectName("heuvalue")
        self.tabledetails = QtWidgets.QTableWidget(self.tab)
        self.tabledetails.setGeometry(QtCore.QRect(280, 120, 401, 311))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setUnderline(False)
        self.tabledetails.setFont(font)
        self.tabledetails.setMouseTracking(False)
        self.tabledetails.setTabletTracking(False)
        self.tabledetails.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tabledetails.setAutoFillBackground(False)
        self.tabledetails.setStyleSheet("background-color:rgb(239, 254, 255)")
        self.tabledetails.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.tabledetails.setFrameShadow(QtWidgets.QFrame.Raised)
        self.tabledetails.setLineWidth(3)
        self.tabledetails.setMidLineWidth(3)
        self.tabledetails.setAlternatingRowColors(True)
        self.tabledetails.setGridStyle(QtCore.Qt.SolidLine)
        self.tabledetails.setObjectName("tabledetails")
        self.tabledetails.setColumnCount(5)
        self.tabledetails.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tabledetails.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabledetails.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabledetails.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabledetails.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabledetails.setHorizontalHeaderItem(4, item)
        self.tabledetails.horizontalHeader().setCascadingSectionResizes(False)
        self.tabledetails.verticalHeader().setStretchLastSection(False)
        self.nodes = QtWidgets.QLabel(self.tab)
        self.nodes.setGeometry(QtCore.QRect(110, 90, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setItalic(True)
        font.setUnderline(True)
        self.nodes.setFont(font)
        self.nodes.setStyleSheet("color:green;")
        self.nodes.setObjectName("nodes")
        self.savenode = QtWidgets.QPushButton(self.tab)
        self.savenode.setGeometry(QtCore.QRect(90, 220, 101, 31))
        self.savenode.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.savenode.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border-color:black;\n"
"font: bold 14px;")
        self.savenode.setIconSize(QtCore.QSize(12, 12))
        self.savenode.setCheckable(False)
        self.savenode.setDefault(False)
        self.savenode.setFlat(False)
        self.savenode.setObjectName("savenode")
        self.savenode.clicked.connect(self.save)
        self.edges = QtWidgets.QLabel(self.tab)
        self.edges.setGeometry(QtCore.QRect(110, 270, 61, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(13)
        font.setItalic(True)
        font.setUnderline(True)
        self.edges.setFont(font)
        self.edges.setStyleSheet("color:green;\n"
"")
        self.edges.setObjectName("edges")
        self.fromnode = QtWidgets.QLineEdit(self.tab)
        self.fromnode.setGeometry(QtCore.QRect(30, 300, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.fromnode.setFont(font)
        self.fromnode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.fromnode.setObjectName("fromnode")
        self.tonode = QtWidgets.QLineEdit(self.tab)
        self.tonode.setGeometry(QtCore.QRect(30, 350, 221, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tonode.setFont(font)
        self.tonode.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.tonode.setText("")
        self.tonode.setObjectName("tonode")
        self.cost = QtWidgets.QSpinBox(self.tab)
        self.cost.setGeometry(QtCore.QRect(210, 400, 41, 21))
        self.cost.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.cost.setObjectName("cost")
        self.entercost = QtWidgets.QLabel(self.tab)
        self.entercost.setGeometry(QtCore.QRect(30, 400, 91, 21))
        self.entercost.setStyleSheet("color:brown;")
        self.entercost.setObjectName("entercost")
        self.addedge = QtWidgets.QPushButton(self.tab)
        self.addedge.setGeometry(QtCore.QRect(90, 460, 101, 31))
        self.addedge.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.addedge.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border-color:black;\n"
"font: bold 14px;")
        self.addedge.setIconSize(QtCore.QSize(12, 12))
        self.addedge.setCheckable(False)
        self.addedge.setDefault(False)
        self.addedge.setFlat(False)
        self.addedge.setObjectName("addedge")
        self.addedge.clicked.connect(self.addEdge)
        self.directedorno = QtWidgets.QCheckBox(self.tab)
        self.directedorno.setGeometry(QtCore.QRect(110, 430, 90, 21))
        self.directedorno.setObjectName("directedorno")

        self.startorno = QtWidgets.QCheckBox(self.tab)
        self.startorno.setGeometry(QtCore.QRect(90, 190, 51, 21))
        self.startorno.setStyleSheet("\n"
"")
        self.startorno.setObjectName("startorno")
        self.goalorno = QtWidgets.QCheckBox(self.tab)
        self.goalorno.setGeometry(QtCore.QRect(150, 190, 51, 21))
        self.goalorno.setObjectName("goalorno")
        self.displaygraph = QtWidgets.QPushButton(self.tab)
        self.displaygraph.setGeometry(QtCore.QRect(430, 460, 111, 41))
        self.displaygraph.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.displaygraph.setStyleSheet("background-color:rgb(255, 255, 255);\n"
"border-color:black;\n"
"font: bold 14px;")
        self.displaygraph.setIconSize(QtCore.QSize(12, 12))
        self.displaygraph.setCheckable(False)
        self.displaygraph.setDefault(False)
        self.displaygraph.setFlat(False)
        self.displaygraph.setObjectName("displaygraph")
        self.displaygraph.clicked.connect(self.display)
        self.window1.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.uninformedsearches = QtWidgets.QLabel(self.tab_2)
        self.uninformedsearches.setGeometry(QtCore.QRect(50, 90, 221, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(True)
        font.setUnderline(True)
        font.setWeight(50)
        self.uninformedsearches.setFont(font)
        self.uninformedsearches.setStyleSheet("color:green;")
        self.uninformedsearches.setObjectName("uninformedsearches")
        self.bfs = QtWidgets.QPushButton(self.tab_2)
        self.bfs.setGeometry(QtCore.QRect(120, 130, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.bfs.setFont(font)
        self.bfs.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.bfs.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.bfs.setObjectName("bfs")
        self.bfs.clicked.connect(self.breadth)
        self.ucs = QtWidgets.QPushButton(self.tab_2)
        self.ucs.setGeometry(QtCore.QRect(120, 190, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.ucs.setFont(font)
        self.ucs.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.ucs.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.ucs.setObjectName("ucs")
        self.ucs.clicked.connect(self.uniformcost)
        self.dfs = QtWidgets.QPushButton(self.tab_2)
        self.dfs.setGeometry(QtCore.QRect(120, 250, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.dfs.setFont(font)
        self.dfs.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dfs.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.dfs.setObjectName("dfs")
        self.dfs.clicked.connect(self.depthfirst)
        self.dls = QtWidgets.QPushButton(self.tab_2)
        self.dls.setGeometry(QtCore.QRect(120, 310, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.dls.setFont(font)
        self.dls.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dls.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.dls.setObjectName("dls")
        self.dls.clicked.connect(self.dlsbut)
        self.iterativedeepening = QtWidgets.QPushButton(self.tab_2)
        self.iterativedeepening.setGeometry(QtCore.QRect(120, 370, 141, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.iterativedeepening.setFont(font)
        self.iterativedeepening.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.iterativedeepening.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.iterativedeepening.setObjectName("iterativedeepening")
        self.iterativedeepening.clicked.connect(self.iterativebut)
        self.informedsearch = QtWidgets.QLabel(self.tab_2)
        self.informedsearch.setGeometry(QtCore.QRect(400, 90, 191, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(True)
        font.setUnderline(True)
        font.setWeight(50)
        self.informedsearch.setFont(font)
        self.informedsearch.setStyleSheet("color:green;")
        self.informedsearch.setObjectName("informedsearch")
        self.line_5 = QtWidgets.QFrame(self.tab_2)
        self.line_5.setGeometry(QtCore.QRect(30, 60, 661, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.subjcode_2 = QtWidgets.QLabel(self.tab_2)
        self.subjcode_2.setGeometry(QtCore.QRect(650, 40, 41, 21))
        self.subjcode_2.setObjectName("subjcode_2")
        self.aiproject_2 = QtWidgets.QLabel(self.tab_2)
        self.aiproject_2.setGeometry(QtCore.QRect(560, 20, 141, 16))
        self.aiproject_2.setObjectName("aiproject_2")
        self.logo_2 = QtWidgets.QLabel(self.tab_2)
        self.logo_2.setGeometry(QtCore.QRect(30, 20, 41, 41))
        self.logo_2.setStyleSheet("background-image: url(:/img/logo.png)")
        self.logo_2.setText("")
        self.logo_2.setPixmap(QtGui.QPixmap(":/img/logo.png"))
        self.logo_2.setScaledContents(True)
        self.logo_2.setObjectName("logo_2")
        self.title_2 = QtWidgets.QLabel(self.tab_2)
        self.title_2.setGeometry(QtCore.QRect(180, 20, 600, 39))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(9)
        self.title_2.setFont(font)
        self.title_2.setStyleSheet("font: 75 italic 19pt \"Arial\";\n"
"background-color=\"blue\"")
        self.title_2.setTextFormat(QtCore.Qt.RichText)
        self.title_2.setScaledContents(False)
        self.title_2.setWordWrap(False)
        self.title_2.setObjectName("title_2")
        self.asearch_2 = QtWidgets.QPushButton(self.tab_2)
        self.asearch_2.setGeometry(QtCore.QRect(430, 190, 131, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.asearch_2.setFont(font)
        self.asearch_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.asearch_2.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.asearch_2.setObjectName("asearch_2")
        self.asearch_2.clicked.connect(self.starsearch)
        self.greedysearch_2 = QtWidgets.QPushButton(self.tab_2)
        self.greedysearch_2.setGeometry(QtCore.QRect(430, 130, 131, 41))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        self.greedysearch_2.setFont(font)
        self.greedysearch_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.greedysearch_2.setStyleSheet("background-color:rgb(255, 255, 255)")
        self.greedysearch_2.setObjectName("greedysearch_2")
        self.greedysearch_2.clicked.connect(self.greedybut)
        self.limitlabel = QtWidgets.QLabel(self.tab_2)
        self.limitlabel.setGeometry(QtCore.QRect(280, 310, 71, 21))
        self.limitlabel.setStyleSheet("color:brown;")
        self.limitlabel.setObjectName("limitlabel")
        self.limit = QtWidgets.QSpinBox(self.tab_2)
        self.limit.setGeometry(QtCore.QRect(290, 330, 41, 21))
        self.limit.setStyleSheet("background-color:rgb(255, 255, 255)\n"
"")
        self.limit.setObjectName("limit")
        self.pathfinal = QtWidgets.QTextBrowser(self.tab_2)
        self.pathfinal.setGeometry(QtCore.QRect(100, 450, 531, 71))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.pathfinal.setFont(font)
        self.pathfinal.setFrameShape(QtWidgets.QFrame.HLine)
        self.pathfinal.setFrameShadow(QtWidgets.QFrame.Raised)
        self.pathfinal.setObjectName("pathfinal")
        self.window1.addTab(self.tab_2, "")
        AIProject.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(AIProject)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 721, 21))
        self.menubar.setObjectName("menubar")
        AIProject.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(AIProject)
        self.statusbar.setObjectName("statusbar")
        AIProject.setStatusBar(self.statusbar)

        self.retranslateUi(AIProject)
        self.window1.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(AIProject)

    def retranslateUi(self, AIProject):
        _translate = QtCore.QCoreApplication.translate
        AIProject.setWindowTitle(_translate("AIProject", "MainWindow"))
        self.title.setText(_translate("AIProject", "Searching Algorithms"))
        self.aiproject.setText(_translate("AIProject", "Artificial Intelligence Project"))
        self.subjcode.setText(_translate("AIProject", "CSE472"))
        self.node.setPlaceholderText(_translate("AIProject", "Enter node name"))
        self.nodeheuristic.setText(_translate("AIProject", "Hueristic:"))
        item = self.tabledetails.horizontalHeaderItem(0)
        item.setText(_translate("AIProject", "Node Name"))
        item = self.tabledetails.horizontalHeaderItem(1)
        item.setText(_translate("AIProject", "Node Heuristic"))
        item = self.tabledetails.horizontalHeaderItem(2)
        item.setText(_translate("AIProject", "Edge from"))
        item = self.tabledetails.horizontalHeaderItem(3)
        item.setText(_translate("AIProject", "Edge to"))
        item = self.tabledetails.horizontalHeaderItem(4)
        item.setText(_translate("AIProject", "Cost of Edge"))
        self.tabledetails.setColumnWidth(0,90)
        self.tabledetails.setColumnWidth(1, 115)
        self.tabledetails.setColumnWidth(2, 80)
        self.tabledetails.setColumnWidth(3, 70)
        self.tabledetails.setColumnWidth(4, 98)
        self.nodes.setText(_translate("AIProject", "Nodes"))
        self.savenode.setText(_translate("AIProject", "Save Node"))
        self.edges.setText(_translate("AIProject", "Edges"))
        self.fromnode.setPlaceholderText(_translate("AIProject", "An edge from node:"))
        self.tonode.setPlaceholderText(_translate("AIProject", "To node:"))
        self.entercost.setText(_translate("AIProject", "Cost of the edge:"))
        self.addedge.setText(_translate("AIProject", "Add Edge"))
        self.directedorno.setText(_translate("AIProject", "Directed"))
        self.startorno.setText(_translate("AIProject", "Start"))
        self.goalorno.setText(_translate("AIProject", "Goal"))
        self.displaygraph.setText(_translate("AIProject", "Display Graph"))
        self.window1.setTabText(self.window1.indexOf(self.tab), _translate("AIProject", "Create Your Graph"))
        self.uninformedsearches.setText(_translate("AIProject", "Uninformed Searches"))
        self.bfs.setText(_translate("AIProject", "Breadth First Search"))
        self.ucs.setText(_translate("AIProject", "Uniform Cost Search"))
        self.dfs.setText(_translate("AIProject", "Depth First Search"))
        self.dls.setText(_translate("AIProject", "Depth Limited Search"))
        self.iterativedeepening.setText(_translate("AIProject", "Iterative Deepening"))
        self.informedsearch.setText(_translate("AIProject", "Informed Searches"))
        self.subjcode_2.setText(_translate("AIProject", "CSE472"))
        self.aiproject_2.setText(_translate("AIProject", "Artificial Intelligence Project"))
        self.title_2.setText(_translate("AIProject", "Searching Algorithms"))
        self.asearch_2.setText(_translate("AIProject", "A* Search "))
        self.greedysearch_2.setText(_translate("AIProject", "Greedy Search"))
        self.limitlabel.setText(_translate("AIProject", "Limit to level:"))
        self.pathfinal.setHtml(_translate("AIProject", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:18pt; font-weight:400; font-style:italic;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.window1.setTabText(self.window1.indexOf(self.tab_2), _translate("AIProject", "Search!"))

    def save(self):
        if (self.node.text() == ""):
            print("error")
        else:
            if self.startorno.isChecked():
                G.add_node(self.node.text(), title=self.heuvalue.value())
                backendg.Graph.update([(self.node.text(), [])])
                backendg.Heuristic.update([(self.node.text(), int(self.heuvalue.value()))])
                backendg.StartNode = self.node.text()
                numRows = self.tabledetails.rowCount()
                self.tabledetails.insertRow(numRows)
                self.tabledetails.setItem(numRows, 0, QtWidgets.QTableWidgetItem(str(self.node.text()+" : (START)")))
                self.tabledetails.setItem(numRows, 1, QtWidgets.QTableWidgetItem(str(self.heuvalue.text())))
                self.startorno.setChecked(0)
                self.goalorno.setChecked(0)
                self.heuvalue.setValue(0)
                self.node.clear()
            else:
                if self.goalorno.isChecked():
                    self.heuvalue.setValue(0)
                    G.add_node(self.node.text(), title=self.heuvalue.value())
                    backendg.Graph.update([(self.node.text(), [])])
                    backendg.Heuristic.update([(self.node.text(), int(self.heuvalue.value()))])
                    backendg.GoalNode.append(self.node.text())
                    numRows = self.tabledetails.rowCount()
                    self.tabledetails.insertRow(numRows)
                    self.tabledetails.setItem(numRows, 0, QtWidgets.QTableWidgetItem(str(self.node.text()+" : (GOAL)")))
                    self.tabledetails.setItem(numRows, 1, QtWidgets.QTableWidgetItem(str(self.heuvalue.text())))
                    self.startorno.setChecked(0)
                    self.goalorno.setChecked(0)
                    self.node.clear()
                else:
                    G.add_node(self.node.text(), title=self.heuvalue.value())
                    backendg.Graph.update([(self.node.text(), [])])
                    backendg.Heuristic.update([(self.node.text(), int(self.heuvalue.value()))])
                    numRows = self.tabledetails.rowCount()
                    self.tabledetails.insertRow(numRows)
                    self.tabledetails.setItem(numRows, 0, QtWidgets.QTableWidgetItem(str(self.node.text())))
                    self.tabledetails.setItem(numRows, 1, QtWidgets.QTableWidgetItem(str(self.heuvalue.text())))
                    self.node.clear()
                    self.startorno.setChecked(0)
                    self.goalorno.setChecked(0)
                    self.heuvalue.setValue(0)

    def addEdge(self):
        G.add_edge(self.fromnode.text(), self.tonode.text(), cost=self.cost.value())
        backendg.Graph[self.fromnode.text()].append((self.tonode.text(), int(self.cost.value())))
        numRows = self.tabledetails.rowCount()
        self.tabledetails.insertRow(numRows)
        self.tabledetails.setItem(numRows, 2, QtWidgets.QTableWidgetItem(str(self.fromnode.text())))
        self.tabledetails.setItem(numRows, 3, QtWidgets.QTableWidgetItem(str(self.tonode.text())))
        self.tabledetails.setItem(numRows, 4, QtWidgets.QTableWidgetItem(str(self.cost.text())))
        self.tonode.clear()
        self.cost.setValue(0)

    def display(self):
        pos = nx.fruchterman_reingold_layout(G)
        nx.draw(G, pos, with_labels=True, node_size=1000)
        nx.draw_networkx_edge_labels(G, pos, font_size=20, edge_labels=nx.get_edge_attributes(G, 'cost'))
        listcombo = tuple(
            zip(
                list1, list2
            )
        )
        t1 = list(listcombo)
        listedges = tuple(
            zip(
                list3, list4
            )
        )
        t2 = list(listedges)
        plt.show()
        print(backendg.Graph)

    def uniformcost(self):
        print("UCS")
        path, visited = backendg.UCS(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        x = " -> ".join(path)
        y = " -> ".join(visited)
        print("solution: " + x)
        self.pathfinal.setText("(UCS) Visited nodes are : " + y +"     path: "+ x)

    def depthlimited(self):
        print("DLS")
        path = []
        visited,path = backendg.DLS(backendg.Graph, backendg.StartNode, backendg.GoalNode,self.limit.value())
        x = " -> ".join(visited)
        y = " -> ".join(path)
        print("solution: " + x)
        self.pathfinal.setText("(DLS) visited is : " + x + "path is: "+y)

    def breadth(self):
        print("BFS")
        print("Following is the Breadth-First Search")
        re, path = backendg.BFS(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        x = " -> ".join(re)
        y = " -> ".join(path)
        print(re)
        print("Breadth-first-search visited is: ", " -> " + y)
        self.pathfinal.setText("(BFS) Visited nodes are : " + y+ "      path is: "+x)

    def depthfirst(self):
        print("DFS")
        print("Following is the Depth-First Search")
        re,path = backendg.DFS(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        x = " -> ".join(re)
        y = " -> ".join(path)
        print("Depth-first-search path is: ", " -> " + x)
        self.pathfinal.setText("(DFS) Visited nodes are: " + x+ "        Solution path is: "+y)

    def starsearch(self):
        print("Astar")
        print("Following is the A* Search")
        re ,path= backendg.astarsearch(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        x = " -> ".join(re)
        y = " -> ".join(path)
        print("A* path is: ", " -> " + x)
        self.pathfinal.setText("(A*) Visited nodes are: " + y+ "        Solution path is: "+x)

    def iterativebut(self):
        print("iterative")
        path, visited = backendg.iterative(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        print("sdfj")
        x = " -> ".join(path)
        print("frgtyu")
        y = " -> ".join(visited)
        print("solution: " + x)
        self.pathfinal.setText("(iterative) Visited nodes are : " + y + "     path: " + x)

    def greedybut(self):
        print("greedy")
        print("Following is the greedy Search")
        re,path = backendg.Greedy_Search(backendg.Graph, backendg.StartNode, backendg.GoalNode)
        x = " -> ".join(re)
        y = " -> ".join(path)
        print("greedy path is: ", " -> " + x)
        self.pathfinal.setText("(Greedy) Visited nodes are: " + x+ "        Solution path is: "+y)
    def dlsbut(self):
        print("DLS")
        path = []
        visited, path = backendg.DLS(backendg.Graph, backendg.StartNode, backendg.GoalNode, self.limit.value())
        print(path)
        x = " -> ".join(visited)
        y = " -> ".join(path)
        print("(DLS) visited is: ", " -> " + x)
        self.pathfinal.setText("(DLS) visited is: "+ x +"         path is : " + y)

if __name__ == "__main__":
    G=nx.DiGraph()
    import sys
    Startnode = startz
    app = QtWidgets.QApplication(sys.argv)
    AIProject = QtWidgets.QMainWindow()
    ui = Ui_AIProject()
    ui.setupUi(AIProject)
    AIProject.show()
    sys.exit(app.exec_())

